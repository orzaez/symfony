{% extends 'layout_viewuser.html.twig' %}
{% block body %}
{{ parent() }}

<div class="container-fluid"> 
    <div class="col-md-12">
        <div class="title">
            <h2>Users list</h2>
        </div>
        <div class="table-responsive table">
            <table id="user_table" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>{{'Usuario'|trans}}</th>
                        <th>{{'Nombre'|trans}}</th>
                        <th>{{'Apellidos'|trans}}</th>
                        <th>{{'Correo electronico'|trans}}</th>
                        <th>{{'Contraseña'|trans}}</th>
                        <th>{{'Rol'|trans}}</th>
                        <th>{{'Activo'|trans}}</th>
                        <th>{{'Creado'|trans}}</th>
                        <th>{{'Modificado'|trans}}</th>
                        <th>{{'Acciones'|trans}}</th>
                    </tr>
                </thead>    
            </table>
        </div>
    </div>
</div>
{% endblock body %}
{% block javascripts  %}
{{ parent() }}

<script>
    $(document).ready(function () {
        // Datatable
        $('#user_table thead tr').clone(true).appendTo('#user_table thead');
        $('#user_table thead tr:eq(1) th').each( function (i){
            var title = $(this).text();
            if (i==10){
                $(this).html( '' );
            }else{
                $(this).html( '<input style="width:75%;" type="text" placeholder="'+title+'" />' );
            }
            $('input', this ).on( 'keyup change', function () {
                if ( tableUsers.column(i).search() !== this.value ) {
                    tableUsers
                        .column(i)
                        .search( this.value )
                        .draw();
                }
            });
        });
        tableUsers = $('#user_table').DataTable({
            orderCellsTop: true,
            fixedHeader: true,
            dom: 'Blrtip',
            columnDefs: [
                { orderable: true, className: 'reorder', targets: [0,1,2,3,4,5,6,7,9] },
                { orderable: false, targets: [10] }
            ],
            order:[0, 'ASC'],
            searching:true,
            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100,
            "{{('Todos')|trans}}"]],
            buttons:[{
                extend: 'excelHtml5',},
                    {
                    extend: 'pdfHtml5',
                    orientation: 'landscape',
                    pageSize: 'LEGAL',
                    },
            ],
            rowId: 'idRow',
            responsive: true,
            autoWidth: true,
            "processing": true,
            "serverSide": false,
            "pagingType": "full_numbers",
            language: {
                "sProcessing":
                "{{ ('Procesando...') | trans }}","sLengthMenu": "{{ ('Mostrar _MENU_ registros') | trans}}",
                "sZeroRecords": "{{ ('No se encontraron resultados') | trans }}",
                "sEmptyTable": "{{ ('Ningún dato disponible en esta tabla') | trans }}",
                "sInfo": "{{ ('Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros') | trans }}",
                "sInfoEmpty": "{{ ('Mostrando registros del 0 al 0 de un total de 0 registros') | trans }}",
                "sInfoFiltered": "{{ ('(filtrado de un total de _MAX_ registros)') | trans }}",
                "sInfoPostFix": "",
                "sSearch": "{{ ('Buscar:') | trans }}",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "{{ ('Cargando...') | trans }}",
                "oPaginate": {
                    "sFirst": "{{ ('Primero') | trans }}",
                    "sLast": "{{ ('Último') | trans }}",
                    "sNext": "{{ ('Siguiente') | trans }}",
                    "sPrevious": "{{ ('Anterior') | trans }}",
                },
                "oAria": {
                "sSortAscending": "{{ (': Activar para ordenar la columna de manera ascendente') | trans }}",
                "sSortDescending": "{{ (': Activar para ordenar la columna de manera descendente') | trans }}"
                },
            },
            ajax: {
                url: "{{ path('test_userdatable') }}",
                method: 'POST',
                data: {'form_filters': $('#filtersForm').serialize() }
            },
            "drawCallback": function( settings ) {
                datatableActions();
            }, 
            columns: [
                { data: 'id'},
                { data: 'username' },
                { data: 'first_name' },
                { data: 'last_name' },
                { data: 'email' },
                { data: 'password' },
                { data: 'role' },
                { data: 'status' },
                { data: 'created_at' },
                { data: 'updated_at' },
                { data: null,
                    render: function (data) {
                        return '<a data-id="'+ data.id +'" id="delete" class="btn btn-danger btn-delete">Delete</a>';
                    }
                }
            ]
        });
    });
    function datatableActions() {
        // Botón de borrar
        $(".btn-delete").on("click", function () {

            var id=$(this).data("id");
            deleteuserAjax(id);
        });
        function deleteuserAjax(id){
            $.ajax({
                url: "{{ path('test_delete') }}",
                data: {
                    id:id
                },
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    console.log("success");
                    console.log (data);
                    if (data.status){
                        const swalWithBootstrapButtons = Swal.mixin({
                            customClass: {
                              confirmButton: 'btn btn-success',
                              cancelButton: 'btn btn-danger'
                            },
                            buttonsStyling: false
                          })
                          swalWithBootstrapButtons.fire({
                            title: '¿Quiere eliminar el usuario?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: `Eliminar`,
                            cancelButtonText: 'No, cancel!',
                          }).then((result) => {
                            /* Read more about isConfirmed, isDenied below */
                            if (result.isConfirmed) {
                              Swal.fire({
                                  position: 'center',
                                  icon: 'success',
                                  title: 'Usuario eliminado correctamente.',
                                  showConfirmButton: false,
                                  timer: 2000
                                });
                                setTimeout(function() {
                                    location.reload();
                                }, 1000);
                            } else if (result.isDenied) {
                              Swal.fire('Este usuario sigue vivo', '', 'info')
                            }
                          })
                        
                    }
                    else{
                        alert("error");
                        alert(data.msg);
                    }
                },
    
                error: function (error) {
                    console.log("error");
                    console.log (error);
                },
            });
        }
        }

</script>
{% endblock javascripts %}