<?php

namespace TestBundle\Repository;

use Doctrine\DBAL\DBALException;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository{
    public function findTasks() {
        $em = $this->getEntityManager();
        $sqlConnection = $em->getConnection();

        $sql = "SELECT 
        t.id as id,
        t.name as name,
        t.description as description,
        t.created_At as created_at,
        t.updated_At as updated_at,
        t.user_id AS userid
        FROM user AS u 
        RIGHT JOIN task AS t ON t.user_id = u.username";

        // Ejecutamos la consulta
        $qr = $sqlConnection->prepare($sql);
        $qr->execute();
        $queryResult = $qr->fetchAll(\PDO::FETCH_ASSOC);
 
        return $queryResult;
    }

    public function getTasksDatatable($params, $form_filters, $user) {
        $em = $this->getEntityManager();
        //Array con las columnas para la ordenaciÃ³n
        $columns = [
            0 => "id",
            1 => "name",
            2 => "description",
            3 => "created_At",
            4 => "updated_At",
            5 => "user_id"
        ];

        $sqlTot = $sqlRec = "";
        $where = " WHERE TRUE ";


        //Procesamos los filtros
        if (isset($form_filters['id']) AND !empty($form_filters['id'])) {
            $where .= " AND ( t.id LIKE '%". trim($form_filters['id']) ."%')" ;
        }
        if (isset($form_filters['name']) AND !empty($form_filters['name'])) {
            $where .= " AND ( t.name LIKE '%". trim($form_filters['name']) ."%')" ;
        }

        if (isset($form_filters['description']) AND !empty($form_filters['description'])) {
            $where .= "  AND ( t.description = '" . trim($form_filters['description']) ."' ) " ;
        }

        if (isset($form_filters['created_At']) AND !empty($form_filters['created_At'])) {
            $where .= " AND ( t.created_At LIKE '%". trim($form_filters['created_At']) ."%')" ; 
        }

        if (isset($form_filters['updated_At']) AND !empty($form_filters['updated_At'])) {
            $where .= " AND ( t.updated_At LIKE '%". trim($form_filters['updated_At']) ."%' )" ;
        }
        if (isset($form_filters['user_id']) AND !empty($form_filters['user_id'])) {
            $where .= " AND ( t.user_id LIKE '%". trim($form_filters['user_id']) ."%' )" ;
        }


        //Montamos la consulta
        $sql = "SELECT 
        t.id as id,
        t.name as `name`,
        t.description as `description`,
        t.created_At as created_At,
        t.updated_at as updated_At,
        t.user_id as user_id
        FROM task AS t";
        try{
            //Creamos una query para el total y otra para los datos filtrados
            // $sqlTot .= $sql;
            $sqlRec .= $sql;

            //Concatenamos los filtros
            if (isset($where) && $where != '') {
                $sqlRec .= $where;
            }

            //Procesamos la ordenaciÃ³n
            if(isset($params['order'])){
                $sqlRec .= " ORDER BY " . $columns[$params['order'][0]['column']] . " " . $params['order'][0]['dir'] ;
            }

            //Procesamos el paginado
            $limit=" ";
            if(isset($params['length']) && $params['length'] != -1){
                $limit=" LIMIT ".$params['start']." ,".$params['length']." ";
            }

            //Guardamos en una variable la consulta filtrada antes de aÃ±adirle el limit, para el contador
            $sqlTot .= $sqlRec;
            $sqlRec .= $limit;

            //Ejecutamos las consultas
            $queryTot = $this->getEntityManager()->getConnection()->executeQuery($sqlTot)->rowCount();
            $queryRecordsTot = $this->getEntityManager()->getConnection()->executeQuery($sqlTot)->rowCount();
            $queryRecords = $this->getEntityManager()->getConnection()->executeQuery($sqlRec)->fetchAll(\PDO::FETCH_ASSOC);
            $data = $queryRecords;

            //Montamos la respuesta
            $json_data = array(
                "draw" => intval($params['draw']),
                "recordsTotal" => intval($queryTot),
                "recordsFiltered" => intval($queryRecordsTot),
                "data" => $data
            );
        }catch (DBALException $e) {
            $json_data = $e->getMessage();
        }

        return $json_data;
    }
}
